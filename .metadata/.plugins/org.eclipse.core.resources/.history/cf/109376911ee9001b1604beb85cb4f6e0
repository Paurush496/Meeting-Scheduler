package LaunchApplication;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import employees.Employee;
import meetManager.MeetScheduler;
import meeting.MeetingInfo;

public class ManageInputOutput {
	
	static AppStorage storage;
	static String consoleInput;
	static java.io.BufferedReader stndin = new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
	static DateTime startTime;
	static DateTime endTime;
	// Format for input
	static DateTimeFormatter dtf = DateTimeFormat.forPattern("HH:mm:ss");

	public static void processInput(String input, AppStorage data) throws IOException {
		storage = data;
		
		switch(input) {
		case "1":
			bookNewMeeting();
			break;
		case "2":
			findFreeTimeSlots();
			break;
		case "3":
			printAllEmployees();
			break;
		case "4":
			System.out.println(Arrays.toString(storage.getAllMeetingRooms()));
			break;
		default: break;
		}		
	}
	
	private static void bookNewMeeting() throws IOException {
		int employeeId = 0;
		System.out.println("Please Enter Employee Id of the Organizer: ");
		System.out.flush();
		if ((consoleInput = stndin.readLine()) != null) {
			employeeId = Integer.valueOf(consoleInput).intValue();
		}
		System.out.println("Please Enter Start Time of the Meeting (in HH:mm:ss): ");
		System.out.flush();
		if ((consoleInput = stndin.readLine()) != null) {
			// Parsing the date
			startTime = dtf.parseDateTime(consoleInput);
		}
		System.out.println("Start Time " + startTime.toString());
		System.out.println("Please Enter End Time of the Meeting (in HH:mm:ss): ");
		System.out.flush();
		if ((consoleInput = stndin.readLine()) != null) {
			// Parsing the date
			endTime = dtf.parseDateTime(consoleInput);
		}
		System.out.println("End Time " + endTime.toString());
		String output = ((MeetScheduler) storage).organizeNewMeet(employeeId, startTime, endTime);
		System.out.println(output);
	}
	
	private static void findFreeTimeSlots() throws IOException {
		java.io.BufferedReader stndin;
		stndin = new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
		System.out.println("Please Enter comma separated Employee Ids: ");
		System.out.flush();
		String input;
		int employeeIds[] = null;
		DateTime startTime = new DateTime();
		DateTime endTime = new DateTime();
		// Format for input
		DateTimeFormatter dtf = DateTimeFormat.forPattern("HH:mm:ss");
		if ((input = stndin.readLine()) != null) {
			String[] stringEmpIds = input.split(",");
			employeeIds = new int[stringEmpIds.length];
			for (int i=0; i<stringEmpIds.length; i++) {
				employeeIds[i] = Integer.valueOf(stringEmpIds[i]).intValue();
			}
		}
		System.out.println("Please Enter Start Time of the Interval (in HH:mm:ss): ");
		System.out.flush();
		if ((input = stndin.readLine()) != null) {
			// Parsing the date
			startTime = dtf.parseDateTime(input);
		}
		System.out.println("Start Time " + startTime.toString());
		System.out.println("Please Enter End Time of the Interval (in HH:mm:ss): ");
		System.out.flush();
		if ((input = stndin.readLine()) != null) {
			// Parsing the date
			endTime = dtf.parseDateTime(input);
		}
		System.out.println("End Time " + endTime.toString());
		List<String> freeTimeSlots = ((MeetScheduler) storage).findFreeTimeSlots(employeeIds, startTime, endTime);
		System.out.println("Free Time Slots: " + freeTimeSlots.toString());
	}

	private static void printAllEmployees() {
		Employee[] allEmployees = storage.getAllEmployees();
		String employeeString = "";
		for (int i=0; i<allEmployees.length; i++) {
			String employee = "[ Employee " + allEmployees[i].getEmployeeId() + ": [";
			List<MeetingInfo> meetings = allEmployees[i].getEmployeeMeetings();
			for (int j=0; j<meetings.size(); j++) {
				String meetInfo = "[" + meetings.get(j).getOrganizerId() + " , " +
						meetings.get(j).getMeetingInterval().getStart().getMinuteOfDay() + "mins - " +
						meetings.get(j).getMeetingInterval().getEnd().getMinuteOfDay() + "mins , " + 
						meetings.get(j).getMeetingId() + "]";
				employee += meetInfo;
			}
			employee += "]]" + "\r\n";
			employeeString += employee;
		}
		System.out.println("All Employees: " + employeeString);
	}
}
